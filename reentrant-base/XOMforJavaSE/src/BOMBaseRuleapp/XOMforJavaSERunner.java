//      -----------------------------------------------------------------------
//      Licensed Materials - Property of IBM
//      IBM Decision Server
//      (c) Copyright IBM Corporation 1987, 2014. All Rights Reserved.
//      RuleApp: BOM Base Ruleapp
//      Date: Mon, 22 Sep 2014 18:50:16 EDT
//      Generated by: Decision Server 8.5.0.0
//
//      N O T I C E
//
//      Changes to this file will be lost if the code is regenerated.
//      Note to U.S. Government Users Restricted Rights: 
//      Use, duplication or disclosure restricted by GSA ADP Schedule 
//      Contract with IBM Corp.
//     -----------------------------------------------------------------------

package BOMBaseRuleapp;

import ilog.rules.res.model.IlrPath;
import ilog.rules.res.session.IlrJ2SESessionFactory;
import ilog.rules.res.session.IlrSessionFactory;
import ilog.rules.res.session.IlrSessionRequest;
import ilog.rules.res.session.IlrSessionResponse;
import ilog.rules.res.session.IlrStatelessSession;

import java.io.PrintWriter;
import java.io.Serializable;

/**
 * This interface contains one method for each ruleset of the RuleApp to run.
 * @deprecated This class has been replaced by the @RulesetChildRunner. Please see https://www.ibm.com/support/knowledgecenter/en/SSQP76_8.9.0/com.ibm.odm.dserver.rules.res.managing/topics/tsk_res_cre_example.html for details of this update. 
 */
public class XOMforJavaSERunner {
	private static final long serialVersionUID = 1L;
	private static IlrSessionFactory sessionFactory = null;

	/**
	 * This method allows to execute a ruleset archive from a RuleApp archive.
	 * The RuleApp archive is saved at hte root of the project and is called :
	 * BOMBaseRuleapp.jar. The ruleset archive tested in this method is BOMBase
	 * (version 1.0). The in or inout ruleset parameters are :
	 * <ul>
	 * <li>borrower ( miniloan.Borrower )</li>
	 * <li>coborrower ( miniloan.Borrower )</li>
	 * <li>loan ( miniloan.Loan )</li>
	 * <li>request ( miniloan.RequestAppendix )</li>
	 * <li>response ( miniloan.Response )</li>
	 * </ul>
	 * The out ruleset parameters are :
	 * <ul>
	 * <li>borrower ( miniloan.Borrower )</li>
	 * <li>coborrower ( miniloan.Borrower )</li>
	 * <li>loan ( miniloan.Loan )</li>
	 * <li>request ( miniloan.RequestAppendix )</li>
	 * <li>response ( miniloan.Response )</li>
	 * </ul>
	 * 
	 * @param borrower
	 *            The borrower to set.
	 * @param coborrower
	 *            The coborrower to set.
	 * @param loan
	 *            The loan to set.
	 * @param request
	 *            The request to set.
	 * @param response
	 *            The response to set.
	 * @return A result class that stores the execution output, the user data
	 *         and the out ruleset parameters.
	 */
	public void executeBOMBase(miniloan.Borrower borrower, miniloan.Borrower coborrower, miniloan.Loan loan,
								miniloan.RequestAppendix request, miniloan.Response response, String rulesetPath)
			throws RulesetExecutionException {
		System.out.println("__________________________ EXECUTING THE RULES_____________________________");
		System.out.println("__________________________ EXECUTING THE RULES_____________________________");
		System.out.println("__________________________ " + rulesetPath +"_____________________________");
		System.out.println("__________________________ EXECUTING THE RULES_____________________________");
		System.out.println("__________________________ EXECUTING THE RULES_____________________________");

		try {
			// create the request
			IlrSessionFactory factory = getFactory();
			IlrSessionRequest ilrSessionRequest = factory.createRequest();
			ilrSessionRequest.setRulesetPath(IlrPath.parsePath(rulesetPath));
			ilrSessionRequest.setUserData("BOMBaseRuleapp.XOMforJavaSERunnerImpl.executeBOMBase");

			ilrSessionRequest.setInputParameter("borrower", borrower);
			ilrSessionRequest.setInputParameter("coborrower", coborrower);
			ilrSessionRequest.setInputParameter("loan", loan);
			ilrSessionRequest.setInputParameter("request", request);
			ilrSessionRequest.setInputParameter("response", response);

			IlrStatelessSession session = factory.createStatelessSession(); // these sessions can be cached and reused (I THINK)

			IlrSessionResponse ilrSessionResponse = session.execute(ilrSessionRequest);
			
			miniloan.Response theResponse = (miniloan.Response) ilrSessionResponse.getOutputParameters().get("response");
			//printResponseResult(theResponse);
			
		} catch (Exception e) {
			e.printStackTrace();
			throw new RulesetExecutionException("BOMBase", e);
		}
	}

	protected static synchronized IlrSessionFactory getFactory() {
		if (sessionFactory == null) {
			PrintWriter writer = new PrintWriter(System.out);
			sessionFactory = new IlrJ2SESessionFactory();
			((IlrJ2SESessionFactory) sessionFactory).setOutput(writer);
		}
		return sessionFactory;
	}
	
	public static void printResponseResult(miniloan.Response theResponse){
		System.out.println("<<< Status of result was >>> " + theResponse.getStatus());
		if(theResponse.getMessages() != null){
			for(int i = 0; i < theResponse.getMessages().size(); i++){
				System.out.println(">>> " + theResponse.getMessages().get(i));
			}
		}
	}
}